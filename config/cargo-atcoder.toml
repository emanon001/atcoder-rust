[atcoder]
submit_via_binary = false # submit via binary by default
use_cross = true          # use `cross` instead of `cargo` when generating binaries
binary_column = 80        # maximum column number of generated binary (0 for no wrapping)
update_interval = 1000    # interval time of fetching result (ms)
strip_path = "/usr/local/opt/binutils/bin/strip"      # specify `strip` command path. NOTE: if you use macOS, you have to install GNU strip and specify its path here.

[profile]
# target to use to generate binary
target = "x86_64-unknown-linux-musl"

[profile.release]
lto = true
panic = 'abort'

# dependencies added to new project
[dependencies]
alga = "=0.9.3"
ascii = "=1.0.0"
bitset-fixed = "=0.1.0"
either = "=1.5.3"
fixedbitset = "=0.2.0"
getrandom = "=0.1.14"
im-rc = "=14.3.0"
indexmap = "=1.3.2"
itertools = "=0.9.0"
itertools-num = "=0.1.3"
lazy_static = "=1.4.0"
libm = "=0.2.1"
maplit = "=1.0.2"
nalgebra = "=0.20.0"
ndarray = "=0.13.0"
num = "=0.2.1"
ordered-float = "=1.0.2"
permutohedron = "=0.2.4"
petgraph = "=0.5.0"
proconio = { version = "=0.3.6", features = ["derive"] }
rand = { version = "=0.7.3", features = ["small_rng"] }
regex = "=1.3.6"
rustc-hash = "=1.1.0"
smallvec = "=1.2.0"
superslice = "=1.0.0"
text_io = "=0.1.8"
whiteread = "=0.5.0"

[project]
# to create `rust-toolchain` file, uncomment this line.
rustc_version = "1.42.0"

# source code template
template = """
#[allow(unused_imports)]
use itertools::Itertools;
#[allow(unused_imports)]
use num::*;
use proconio::input;
#[allow(unused_imports)]
use proconio::marker::*;
#[allow(unused_imports)]
use std::collections::*;

fn solve() {
    input! {
    };
}

fn main() {
    std::thread::Builder::new()
        .name("big stack size".into())
        .stack_size(256 * 1024 * 1024)
        .spawn(|| {
            solve();
        })
        .unwrap()
        .join()
        .unwrap();
}
"""
